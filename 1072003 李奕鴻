#include <iostream>
using namespace std;
class MAT
{
private:
	int col;
	int row;
	int **cell;
public:
	MAT()
	{
		col = 0;
		row = 0;
		cell = 0;
		cout << "MAT's constructor" << endl;
	}
	MAT(int r, int c)
	{
		cell = 0;
		col = 0;
		row = 0;
		setSize(r, c);
		cout << "MAT's constructor with parametrics" << endl;
	}
	~MAT()
	{
		free();
		cout << "MAT's destructor" << endl;
	}
	int getRow()
	{
		return row;
	}
	int getCol()
	{
		return col;
	}
	int get(int x, int y)
	{
		if (x < 0 || x >= row || y < 0 || y >= col)
			throw(0);
		return cell[x][y];
	}
	int& operator()(int i, int j)
	{
		if (i >= row || j >= col)
		{
			cout << "out of bound" << endl;
			throw 0;
		}
		return cell[i][j];
	}
	void setSize(int r, int c)
	{
		free();
		col = c;
		row = r;
		cell = new int*[row];
		for (int i = 0; i < row; i++)
			cell[i] = new int[col];
	}
	void set(int x, int y, int val)
	{
		if (x < 0 || x >= row || y < 0 || y >= col)
			throw(0);
		cell[x][y] = val;
	}
	void show()
	{
		int i, j;
		for (i = 0; i < row; i++)
		{
			for (j = 0; j < col; j++)
				cout << cell[i][j] << "\t";
			cout << endl;
		}
	}
	void transposeshow()
	{
		int i, j;
		for (j = 0; j < col; j++)
		{
			for (i = 0; i < row; i++)
				cout << cell[i][j] << "\t";
			cout << endl;
		}
	}
	void free()
	{
		if (0 == cell) return;
		int i;
		for (i = 0; i < row; i++)
			delete[] cell[i];
		delete[] cell;
		cell = 0;
		col = 0;
		row = 0;
	}
	void transpose()
	{
		int** Tcell;
		int t;
		Tcell = new int*[col];
		for (int i = 0; i < col; i++)
			Tcell[i] = new int[row];
		for (int i = 0; i < row; i++)
		{
			for (int j = 0; j < col; j++)
				Tcell[j][i] = cell[i][j];
		}
		for (int i = 0; i < row; i++)
			delete[]cell[i];
		delete[]cell;
		cell = Tcell;
		t = row;
		row = col;
		col = t;
	}
	friend ostream& operator<<(ostream& os, const MAT& m)
	{
		int i, j;
		for (i = 0; i < m.row; i++)
		{
			for (j = 0; j < m.col; j++)
				os << m.cell[i][j] << "\t";
			os << endl;
		}
		return os;
	}
};
class App
{
public:
	void run()
	{
		//MAT A;
		//A.setSize(3, 2);
		MAT A(3, 2);
		// A.col=3;
		//    cout<<A.col<<"\t"<<A.row<<endl;
		cout << "size: ";
		cout << A.getCol() << " , " << A.getRow() << endl;
		cout << "----------------------------" << endl;
		/*
	A.set(0, 0, 5);
	A.set(0, 1, 9);
	A.set(1, 0, 6);
	A.set(1, 1, 8);
	A.set(2, 0, 7);
	A.set(2, 1, 11);
	*/
		A(0, 0) = 5;
		A(0, 1) = 9;
		A(1, 0) = 6;
		A(1, 1) = 8;
		A(2, 0) = 7;
		A(2, 1) = 11;
		cout << A << endl;
		// cout<<"(1,1) val="<<A.get(1,100)<<endl;
		cout << "(1,1) val=" << A.get(1, 1) << endl;
		A.show();
		cout << "-----------------" << endl;
		// A(2,1)=5;
		// A(100,100)=9;
		A.transpose();
		cout << A << endl;
		A.show();
		// A.free();
	}
};
int main()
{
	App app;
	app.run();
}
