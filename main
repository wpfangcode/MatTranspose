#include <iostream>

using namespace std;

class Matrix {
public:
	void setSize(int row, int col) {
		this->row = row;
		this->col = col;
		MAT = new int* [row];
		for (int i = 0; i < row; i++) {
			MAT[i] = new int[col];
		}
	}
	void set(int row, int col, int data) {
		MAT[row][col] = data;
	}
	void show() {
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				cout << MAT[i][j] << " ";
			}
			cout << endl;
		}
		cout << "---------------------" << endl;
	}
	void free() {
		for (int i = 0; i < row; i++) {
			delete[] MAT[i];
		}
		delete[] MAT;
	}
	void transpose() {
		unsigned int _temp = col;
		col = row;
		row = _temp;
		int** temp = new int* [row];
		for (int i = 0; i < row; i++) {
			temp[i] = new int[col];
		}
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				temp[i][j] = MAT[j][i];
			}
		}
		free();
		MAT = temp;
	}
private:
	unsigned int row;
	unsigned int col;
	int** MAT;
};
class App {
public:
	void run() {
		Matrix* mat = new Matrix();
		mat->setSize(3, 2);
		mat->set(0, 0, 1);
		mat->set(0, 1, 2);
		mat->set(1, 0, 7);
		mat->set(1, 1, 8);
		mat->set(2, 0, 3);
		mat->set(2, 1, 4);
		mat->show();
		mat->transpose();
		mat->show();
		mat->free();
		mat->setSize(3, 3);
		mat->set(0, 0, 1);
		mat->set(0, 1, 2);
		mat->set(0, 2, 3);
		mat->set(1, 0, 4);
		mat->set(1, 1, 5);
		mat->set(1, 2, 6);
		mat->set(2, 0, 7);
		mat->set(2, 1, 8);
		mat->set(2, 2, 9);
		mat->show();
		mat->transpose();
		mat->show();
		mat->free();
	}
};
int main()
{
	App app;
	app.run();
}
