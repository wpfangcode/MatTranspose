
#include <iostream>
using namespace std;
class MAT
{
	int col;
	int row;
	int **cell;
public:
	void setSize(int r, int c)
	{
		col = c;
		row = r;
		cell = new int*[row];
		for (int i = 0; i < row; i++)
			cell[i] = new int[col];
				
	}
	void set(int x, int y, int val)
	{
		cell[x][y] = val;
	}
	void show()
	{
		int i, j;
		for (i = 0; i < row; i++)
		{
			for (j = 0; j < col; j++)
				cout << cell[i][j] << "\t";
			cout << endl;
		}
	}
	void transposeshow()
	{
		int i, j;
		for (j = 0; j < col; j++)
		{
			for (i = 0; i < row; i++)
				cout << cell[i][j] << "\t";
			cout << endl;
		}
	}
	void free()
	{

		int i;
		for (i = 0; i < row; i++)
			delete[] cell[i];
		delete[] cell;
		cell = 0;
		col = 0;
		row = 0;
	}
	void transpose()
	{
		MAT B; //建立新MAT
		B.setSize(col, row); //設立空間大小-3*2(列*行)
		int i, j;
		for (i = 0; i < B.row; i++) //列
		{
			for (j = 0; j < B.col; j++)  //行 (0.0)(0,1)(0,2)(1,0)(1,1)(1,2)
				B.cell[i][j] = cell[j][i];
		} //把原本的轉置到MAT B
		
		free(); //清空MAT A

		setSize(B.row, B.col); //重新設立空間大小-2*3(列*行)
		for (i = 0; i < row; i++) 
		{
			for (j = 0; j < col; j++)
				cell[i][j] = B.cell[i][j]; //把暫存在MAT B的陣列，放回原本的陣列
		}
	}
};
class App
{
public:
	void run()
	{
		MAT A;
		A.setSize(3, 2);
		A.set(0, 0, 5);
		A.set(0, 1, 9);
		A.set(1, 0, 6);
		A.set(1, 1, 8);
		A.set(2, 0, 7);
		A.set(2, 1, 11);
		A.show();
		cout << "-----------------" << endl;
		A.transpose();
                A.show();
		A.free();
	}
};


int main()
{
	App app;
	app.run();
}


