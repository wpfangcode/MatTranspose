
#include <iostream>
using namespace std;

class MAT
{
	int col;
	int row;
	int **cell;
public:
	void setSize(int r, int c)
	{
		col = c;
		row = r;
		cell = new int*[row];
		for (int i = 0; i < row; i++)
			cell[i] = new int[col];

	}
	void set(int x, int y, int val)
	{
		cell[x][y] = val;
	}
	void show()
	{
		int i, j;
		for (i = 0; i < row; i++)
		{
			for (j = 0; j < col; j++)
				cout << cell[i][j] << "\t";
			cout << endl;
		}
	}
	void transposeshow()
	{
		int i, j;
		for (j = 0; j < col; j++)
		{
			for (i = 0; i < row; i++)
				cout << cell[i][j] << "\t";
			cout << endl;
		}
	}
	void free()
	{

		int i;
		for (i = 0; i < row; i++)
			delete[] cell[i];
		delete[] cell;
		cell = 0;
		col = 0;
		row = 0;
	}
	void transpose()
	{
		//將原本cell數值存入一陣列save
		int i, j;
		int k = 0;

		int save[6];
		for (i = 0; i < row; i++)
		{
			for (j = 0; j < col; j++)
			{
				save[k] = cell[i][j];
				k++;
			}
		}

		//清空cell內數值
		for (i = 0; i < row; i++)
		{
			delete[] cell[i];
		}
		delete[] cell;

		//重新定義cell大小
		row = 2;
		col = 3;
		cell = new int*[row];
		for (i = 0; i < row; i++)
		{
			cell[i] = new int[col];
		}

		//將數值重新存入陣列
		k = 0;
		for (i = 0; i <= 0; i++)
		{
			for (j = 0; j < col; j++)
			{
				cell[i][j] = save[k];
				k = k + 2;
			}
		}
		k = 1;
		for (i = 1; i <= 1; i++)
		{
			for (j = 0; j < col; j++)
			{
				cell[i][j] = save[k];
				k = k + 2;
			}
		}
	}
};
class App
{
public:
	void run()
	{
		MAT A;
		A.setSize(3, 2);
		A.set(0, 0, 5);
		A.set(0, 1, 9);
		A.set(1, 0, 6);
		A.set(1, 1, 8);
		A.set(2, 0, 7);
		A.set(2, 1, 11);
		A.show();
		cout << "-----------------" << endl;
		A.transpose();
		A.show();
		A.free();
	}
};


int main()
{
	App app;
	app.run();
}


