#include <iostream>
using namespace std;
class MAT
{
	int col;
	int row;
	int** cell;
public:
	void setSize(int r, int c)
	{
		col = c;
		row = r;
		cell = new int* [row];
		for (int i = 0; i < row; i++)
			cell[i] = new int[col];

	}
	void set(int x, int y, int val)
	{
		cell[x][y] = val;
	}
	void show()
	{
		int i, j;
		for (i = 0; i < row; i++)
		{
			for (j = 0; j < col; j++)
				cout << cell[i][j] << "\t";
			cout << endl;
		}
	}
	void transposeshow()
	{
		int i, j;
		for (j = 0; j < col; j++)
		{
			for (i = 0; i < row; i++)
				cout << cell[i][j] << "\t";
			cout << endl;
		}
	}
	void free()
	{

		int i;
		for (i = 0; i < row; i++)
			delete[] cell[i];
		delete[] cell;
		cell = 0;
		col = 0;
		row = 0;
	}
	void transpose()
	{
		int** newcell;
		newcell = new int* [col]; //把原本的行改成列
		for (int i = 0; i < col; i++)
			newcell[i] = new int[row]; //把原本的列改成行
		for (int i = 0; i < col; i++)
			for (int j = 0; j < row; j++)
				newcell[i][j] = cell[j][i];//原本的陣列cell[j][i]存入新陣列[i][j]

		/*******************************
		/ [ 1  4 ]      [ 1  2  3 ]   /  [ (0.0)  (1.0) ]      [ (0.0) (0.1) (0.2) ]
		/ [ 2  5 ]  >>				  /  [ (0.1)  (1.1) ]  >>  
		/ [ 3  6 ]      [ 4  5  6 ]   /  [ (0.2)  (2.2) ]      [ (1.0) (1.1) (2.2) ]
		********************************/

		for (int i = 0; i < row; i++)
			delete[]cell[i];
		delete[] cell;

		int trans = row;
		row = col;
		col = trans;
		setSize(row, col);
		cell = newcell;
	}
};
class App
{
public:
	void run()
	{
		MAT A;
		A.setSize(3, 2);
		A.set(0, 0, 5);
		A.set(0, 1, 9);
		A.set(1, 0, 6);
		A.set(1, 1, 8);
		A.set(2, 0, 7);
		A.set(2, 1, 11);
		A.show();
		cout << "-----------------" << endl;
		A.transpose();
		A.show();
		A.free();
	}
};


int main()
{
	App app;
	app.run();
	return 0;
}
